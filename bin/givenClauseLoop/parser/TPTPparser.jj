options{  USER_TOKEN_MANAGER=false;  USER_CHAR_STREAM=false;}
PARSER_BEGIN(Parser)

package givenClauseLoop.parser;

import java.util.*;
import givenClauseLoop.bean.*;import givenClauseLoop.core.Clause;

public class Parser{

	/**
	 * Contains the functions already read with its args number.
	 * This Map avoids the presence of functions with same name
	 * but different number of attributes. 
	 */
	private static Map<String,Integer> functions;

	/**
	 * Contains the predicates already read with its args number.
	 * This Map avoids the presence of predicates with same name
	 * but different number of attributes. 
	 */
	private static Map<String,Integer> predicates;
	
	/**
	 * Queue of all formulae read
	 */
	private static Queue<Clause> formulae;
	/**	 * The variables' set of the formula that it's currently reading	 */	private static Map<String, Variable> variables;

	/**
	 * All the fixed elements (constants, functions, predicates) that are read
	 */
	private static Map<String, Constant> constants;

	/**
	 * Conjunctive Normal Form (CNF) Formulae's Parser.
	 * Based on CNF fragment of TPTP syntax
	 * http://www.tptp.org
	 * http://www.cs.miami.edu/~tptp/TPTP/SyntaxBNF.html
	 *
	 *@param input CNF formulae
	 *@param output
	 */
	public static Queue<Clause> parsing(String input) throws Exception{
		formulae  = new PriorityQueue<Clause>();		predicates = new HashMap<String, Integer>();		functions = new HashMap<String, Integer>();
		constants = new HashMap<String, Constant>();
		
		try{	
			new Parser(new java.io.StringReader(input)).TPTP_file();
		}catch(Throwable e){
			// Catching Throwable is ugly but JavaCC throws Error objects!
			throw new ParseException("Syntax check failed: " + e.getMessage());
		}
		return formulae;
    }
	public static List<Term>[] getArguments(String arg1, String arg2, boolean sameClause) throws Exception{
		functions = new HashMap<String, Integer>();
		constants = new HashMap<String, Constant>();
		List<Term>[] lar = new List[2];		try{		  	variables = new HashMap<String, Variable>();	
			Parser par=new Parser(new java.io.StringReader(arg1));			lar[0]=par.arguments();						// only here you can use ReInit. Not when you call the static class out of this file!			par.ReInit(new java.io.StringReader(arg2));			if(!sameClause) // if the two Literal come from different clauses all the variables are different				variables = new HashMap<String, Variable>();			lar[1]=par.arguments();			return lar;
		}catch(Throwable e){
			// Catching Throwable is ugly but JavaCC throws Error objects!
			e.printStackTrace();
			throw new ParseException("Syntax check failed: " + e.getMessage());
		}
	}
}
PARSER_END(Parser)

SKIP:  { " " | "\t" | "\n" | "\r" }	// "\r" is the backspace escape symbol
SPECIAL_TOKEN: {
			<SINGLE_LINE_COMMENT:	"%"(~["\n","\r"])*("\n"|"\r"|"\r\n")? >
			/* The "~" symbol means to complement the regular expression, 
			 * the set of characters it represents is any UNICODE character not in the specified set.
			 */  
			}
TOKEN: {	<VLINE:				"|">
		|	<NOT:				"~">
		| 	<OPEN_BRACKET:		"(">
		| 	<CLOSE_BRACKET:		")">
		| 	<DOT:				".">
		|	<COMMA:				",">
		| 	<CNF:				"cnf"> 
		// WORD
		| 	<LOWER_WORD:		( <LOWER_ALFA> | <DOLLAR_LOWER_ALFA> ) (<ALFA_NUMERIC>)* >
		|	<UPPER_WORD:		( <UPPER_ALFA> | <DOLLAR_UPPER_ALFA> ) (<ALFA_NUMERIC>)* >
			//|	<ATOMIC_WORD:		<LOWER_WORD> | <SINGLE_QUOTED> >
		|	<SINGLE_QUOTED: 	<SINGLE_QUOTE> (<SQ_CHAR>)+ <SINGLE_QUOTE> >	
		// symbol: 	(# means 'private regular expression')
		|	<#LOWER_ALFA:		["a"-"z"]>
		| 	<#UPPER_ALFA:		["A"-"Z"]>
		| 	<#DOLLAR_LOWER_ALFA: <DEF_SYS><LOWER_ALFA> >
		| 	<#DOLLAR_UPPER_ALFA: <DEF_SYS><UPPER_ALFA> >
		|   <#ALFA_NUMERIC:		<LOWER_ALFA> | <UPPER_ALFA> | <NUMERIC> | <UNDERSCORE> >
		| 	<#DEF_SYS:			"$" | "$$">		// Note: $ means a "defined" word; $$ means a "system" word
		|	<#UNDERSCORE:		"_">
		| 	<#SINGLE_QUOTE: 		"'">
		|	<#SQ_CHAR:			["\40"-"\46"] |  ["\50"-"\133"] | ["\135"-"\176"]> 	// Space and visible characters upto ~, except ' and \
		// NUMBER
		|	<INTEGER:			<SIGNED_INTEGER> | <DECIMAL> >
		| 	<SIGNED_INTEGER:	<SIGN><DECIMAL> >
		|	<DECIMAL:			<ZERO_NUMERIC> | <NON_ZERO_NUMERIC>(<NUMERIC>)*  >    
		// symbol: 	(# means 'private regular expression')
		|	<#SIGN:				"+" | "-">
		|	<#NUMERIC:			["0"-"9"]>			 
		| 	<#ZERO_NUMERIC:  	["0"]>
		|	<#NON_ZERO_NUMERIC:	["1"-"9"]>
		}
/**
* All the contents of the file
*/
void TPTP_file(): {}
{
	TPTP_input() <EOF>
}

/** 
 * Set of CNF annotated formulae
 */
void TPTP_input():{}
{
	( cnf_annotated() )*
}
/**
 * An annotated CNF formula
 */ 
void cnf_annotated():
	{
	  Clause f;
	}
{
	<CNF>  <OPEN_BRACKET> name() <COMMA>  formula_role() <COMMA>  f=cnf_formula()  ( <COMMA> annotations() )? <CLOSE_BRACKET> <DOT>
	{	  formulae.add(f);
	}
}

/**
* The CNF name
*/
void name(): {}	{ <LOWER_WORD> | <SINGLE_QUOTED> | <INTEGER> }

/**
* The CNF formula role
*/
void formula_role(): {}	{	<LOWER_WORD>	}

/**
* The CNF annotations
*/
void annotations():	{}	{ <LOWER_WORD> | <SINGLE_QUOTED> | <UPPER_WORD> | <INTEGER> }


/****************************************************************
**  CNF FORMULAE (variables implicitly universally quantified) **
****************************************************************/

Clause cnf_formula():
	{
	  Literal p=null;
	  //Set<Literal> atoms=new TreeSet<Literal>();	  variables = new HashMap<String, Variable>(); // reinizialize the variable set	  Clause clause=new Clause();
	}
{
	(	  <OPEN_BRACKET> p=literal() {clause.addLiteral(p); } ( <VLINE> p=literal() {clause.addLiteral(p); } )* <CLOSE_BRACKET>
	  | 	p=literal() {clause.addLiteral(p); } ( <VLINE> p=literal() {clause.addLiteral(p); } )*	)
	{
	  	return clause;
	}
}

Literal literal():
	{
	  Token t1=null, t2;
	  List<Term> args=null;
	}
{
	(t1=<NOT>)? (t2=<LOWER_WORD> | t2=<SINGLE_QUOTED>)  ( <OPEN_BRACKET> args=arguments() <CLOSE_BRACKET> )?
	//this production represents predicates with or without arguments
	// <ATOMIC_WORD:		<LOWER_WORD> | <SINGLE_QUOTED> >
	{
		if(args!=null){
			/* check if a Literal with that name 
			 * but different arguments' number has been already read
			 */
			Integer pp=(Integer) predicates.get(t2.image);
			if(pp!=null && pp.intValue()!=args.size())
					throw new ParseException("The predicate \"" + t2.image 
						+ "\" has been already read with " + pp.intValue() + " argument(s)");
			else
				predicates.put(t2.image, new Integer(args.size()));  
		}		return new Literal(t2.image, (t1==null)? true: false, args);
	}
}

List<Term> arguments():
	{
	  List<Term> args=new LinkedList<Term>();
	  Term t;
	}
{
	t=term() {args.add(t);} ( <COMMA>  t=term() {args.add(t);} )*
	{
	  return args;
	}
}

/***************************************************
***************		TERM	************************
***************************************************/
Term term():
	{
	  Token t1=null;
	  List<Term> args=null;
	}
{
  	t1=<UPPER_WORD>			// upper_word defines VARIABLE
	{
		// VARIABLE
		Variable v = variables.get(t1.image);
		if(v == null){
		  v = new Variable(t1.image);
		  variables.put(t1.image, v);
		}
	 	return v;
	}
  	| (t1=<LOWER_WORD> | t1=<SINGLE_QUOTED>) ( <OPEN_BRACKET> args=arguments() <CLOSE_BRACKET> )?
		// atomic_word with brackets defines FUNCTION
		// atomic_word without brackets defines CONSTANT
	{
	 	if(args==null)
	 	{
	 	   // CONSTANT
			Constant c = (Constant) constants.get(t1.image);
			if(c == null){
		 		c = new Constant(t1.image);
		  		constants.put(t1.image, c);
			}
	 		return c;
		}
		else		// FUNCTION
		{
			/* check if a function with that name 
			 * but different arguments' number has been already read
			 */
			Integer ff=(Integer) functions.get(t1.image);
			if(ff!=null && ff.intValue()!=args.size())
					throw new ParseException("The function \"" + t1.image 
						+ "\" has been already read with " + ff.intValue() + " argument(s)");
			else
				functions.put(t1.image, new Integer(args.size()));
			return new Function(t1.image, args);
		}  	
  	}
}
