PARSER_BEGIN(CommandLineParser)

package givenClauseLoop.CommandLineParser;

import givenClauseLoop.bean.CommandOptions;
import givenClauseLoop.bean.EnumClass;
import java.io.*;

public class CommandLineParser {

	private static CommandOptions opt;
	
	public static CommandOptions parsing(String[] args) throws FileNotFoundException, IOException, Exception{
		try{
			StringBuffer input = new StringBuffer();
			opt = new CommandOptions();
			if(args.length==0)
		  		opt.help=true;	
			else {
			  input.append("\t" + args[args.length-1] + "\t");
			  for(int i=0;i<args.length-1;i++)
					input.append("\t" + args[i] + "\t");				}
			new CommandLineParser(new java.io.StringReader(input.toString())).start();
			if(!opt.help && opt.filePath.equals(""))
				throw new ParseException("no file path found");
		}catch(Throwable e){
			// Catching Throwable is ugly but JavaCC throws Error objects!
			//e.printStackTrace();
			opt.help=false;
			throw new ParseException("ERROR in command line\nUsage:\n\t" + 
						"java -jar givenClauseLoop.jar [-fifo | -best | -bestN] [-o | -e] [-timeN] [-contr | -exp] filePath\n\t" +
						"java -jar givenClauseLoop.jar -man");
			/* System.out.println("ERROR in command line\nUsage:\n\t" + 
						"java -jar givenClauseLoop.jar [-fifo | -best | -bestN] [-o | -e] [-timeN] [-contr | -exp] filePath\n\t" +
						"java -jar givenClauseLoop.jar -man");
			*/
		}
		return opt;
	}
}

PARSER_END(CommandLineParser)

SKIP:  { " " | "\n" | "\r" }	// "\r" is the backspace escape symbol

TOKEN:	{	<FIFO_STRATEGY: 	"-fifo">
		|	<BFS_STRATEGY:		"-best"(<NUMERIC>)? >   
		|	<LOOP_TYPE:			"-o" | "-e">
		|	<TIME:				"-time"<NUMERIC> >
		| 	<SEARCH_STRATEGY:	"-exp" | "-contr">
		|   <FILEPATH:			<CHAR1>(<CHAR2>)*>
		|	<NUMERIC:			(["0"-"9"])+> 
		| 	<#CHAR1:			~["-", "\t"] > 	//["\33"-"\172"] | ["\174"] | ["\176"]> 	
		|	<#CHAR2:			~["\t"] >
		}
void start(): { }
{
  ( "\t" filePath() "\t" ) ( "\t" argument() "\t" )*  <EOF>
}

void argument(): {Token t1=null;}
{
  t1=<FIFO_STRATEGY>
  {
    opt.clauseStrategy = EnumClass.clauseStrategy.FIFO;
  }
  | t1=<BFS_STRATEGY>
  {
    opt.clauseStrategy = EnumClass.clauseStrategy.MIN_QUEUE;
    if(t1.image.length()>5)
    	opt.peakGivenRatio= (new Integer(t1.image.substring(5, t1.image.length()))).intValue();
   	
  }
  | t1=<LOOP_TYPE>
  {
	if(t1.image.equals("-o"))
    	opt.loopType = EnumClass.LoopType.OTTER_LOOP;
    else
    	opt.loopType = EnumClass.LoopType.E_LOOP;
  }
  | t1=<TIME>
  {
    opt.timeOut = (new Integer(t1.image.substring(5, t1.image.length()))).intValue();
  }
  | t1=<SEARCH_STRATEGY>
  {
	if(t1.image.equals("-exp"))
    	opt.researchStrategy = EnumClass.researchStrategy.EXP_BEFORE;
    else
    	opt.researchStrategy = EnumClass.researchStrategy.CONTR_BEFORE;
  } 
}

void filePath(): {Token t;}
{
  t=<FILEPATH>
  {
    opt.filePath=t.image;
  }
  | "-man"  {
	opt.help=true;  }	 }