/* Generated By:JavaCC: Do not edit this line. Parser.java */
package givenClauseLoop;

import java.util.*;
public class Parser implements ParserConstants {
        /**	* Conjunctive Normal Form (CNF) Formulae's Parser.	* Based on CNF fragment of TPTP syntax	* http://www.tptp.org	* http://www.cs.miami.edu/~tptp/TPTP/SyntaxBNF.html	*	*@param input CNF formulae	*@param output	*/
        public static void parsing(String input, Object output) throws Exception{
                try{
                        new Parser(new java.io.StringReader(input)).FORMULA();
                }catch(Throwable e){
                        // Catching Throwable is ugly but JavaCC throws Error objects!                        throw new ParseException("Syntax check failed: " + e.getMessage());
                }
    }

/*** All the contents of the file*/
  static final public void TPTP_file() throws ParseException {
    TPTP_input();
    jj_consume_token(0);
  }

/**  * Set of CNF annotated formulae */
  static final public void TPTP_input() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 1:
      case 7:
      case PRED:
      case 17:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      cnf_annotated();
    }
  }

/** * An annotated CNF formula */
  static final public void cnf_annotated() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 17:
      jj_consume_token(17);
      jj_consume_token(2);
      jj_consume_token(3);
      jj_consume_token(18);
      n1 = TERM();
      token = jj_consume_token(EqNotEq);
      n2 = TERM();
                if(token.image.equals("=")){
                        ccObj.incrEq();
                        insertEqual(n1, n2);
                }
                else{
                        ccObj.incrNotEq();
                        insertNotEqual(n1, n2);
                }
      break;
    case 7:
      jj_consume_token(7);
      jj_consume_token(2);
      n1 = TERM();
      jj_consume_token(3);
                ccObj.incrAtomPos();
                ccObj.atomTerm.add(n1.getId());
      break;
    default:
      jj_la1[3] = jj_gen;
      if (jj_2_1(2)) {
        jj_consume_token(1);
        jj_consume_token(7);
        jj_consume_token(2);
        n1 = TERM();
        jj_consume_token(3);
                ccObj.incrAtomNeg();
                if(!ccObj.notAtomTerm.contains(n1.getId())){
                        ccObj.notAtomTerm.add(n1.getId());
                        s1="fv_" + (ccObj.numAtomNeg()*2-1);
                        s2="fv_" + (ccObj.numAtomNeg()*2);
                        n3=insertVar(s1);
                        n4=insertVar(s2);
                        keyNode=  "cons(" + s1 + "," + s2 + ")";
                        /* in order to keep corrispondence between cons "artificial" node and
			 * -atom predicates
			 */
                        ccObj.addCons(keyNode, "-atom(" + n1.getId() + ")");
                        n2=ccObj.dag.get(keyNode);
                        if(n2==null){
                                n2=new Node(keyNode, "cons");
                                ccObj.dag.put(keyNode, n2);
                                ccObj.consTerm.add(keyNode); // in order to maintain "cons" nodes' set
                                n2.addArg(s1);
                                n2.addArg(s2);
                                n3.addParent(keyNode);
                                n4.addParent(keyNode);
                                ccObj.incrEdges();
                                ccObj.incrEdges();
                        }
                        // n1, n2
                        insertEqual(n1, n2);
                }
      } else {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 1:
        case PRED:
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 1:
            t = jj_consume_token(1);
            break;
          default:
            jj_la1[1] = jj_gen;
            ;
          }
          token = jj_consume_token(PRED);
          jj_consume_token(2);
          n1 = TERM();
                                               arguments=new LinkedList<Node>(); arguments.add(n1);
          label_2:
          while (true) {
            switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
            case 5:
              ;
              break;
            default:
              jj_la1[2] = jj_gen;
              break label_2;
            }
            jj_consume_token(5);
            n2 = TERM();
                                arguments.add(n2);
          }
          jj_consume_token(3);
                /* check if a predicate with that name 
		 * but different arguments' number has been already read
		 */
                Integer p=(Integer) predicates.get(token.image);
                if(p!=null){
                        if(p.intValue()!=arguments.size())
                                {if (true) throw new ParseException("The predicate \u005c"" + token.image
                                        + "\u005c" has been already read with " + p.intValue() + " argument(s)");}
                }
                else
                        predicates.put(token.image, new Integer(arguments.size()));

                s1="";
                for(Node n: arguments)
                        s1+= n.getId() + ",";
                s1=s1.substring(0,s1.length()-1);
                keyNode="p_" + token.image + "(" + s1 + ")";
                n1=ccObj.dag.get(keyNode);
                if(n1==null){
                        n1=new Node(keyNode, "p_" + token.image);
                        ccObj.dag.put(keyNode, n1);
                        for(Node a: arguments){
                                n1.addArg(a.getId());
                                a.addParent(keyNode);
                                ccObj.incrEdges();
                        }
                }
                n2=insertVar("#");
                // n1 n2 t
                if(t==null){
                        ccObj.incrPredPos();
                        insertEqual(n1, n2);
                }else{
                        ccObj.incrPredNeg();
                        insertNotEqual(n1, n2);
                }
          break;
        default:
          jj_la1[4] = jj_gen;
          jj_consume_token(-1);
          throw new ParseException();
        }
      }
    }
  }

  static final public Node TERM() throws ParseException {
                Token token;
                Node node, n1, n2;
                String keyNode, id1, id2;
                List<Node> arguments;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CADR:
      token = jj_consume_token(CADR);
      jj_consume_token(2);
      n1 = TERM();
      jj_consume_token(3);
                id1=n1.getId();
                keyNode= token.image + "(" + id1 + ")";
                node=ccObj.dag.get(keyNode);
                if(node==null){
                        node=new Node(keyNode, token.image);
                        ccObj.dag.put(keyNode, node);
                        node.addArg(id1);
                        n1.addParent(keyNode);
                        ccObj.incrEdges();
                }
                {if (true) return node;}
      break;
    case 8:
      token = jj_consume_token(8);
      jj_consume_token(2);
      n1 = TERM();
      jj_consume_token(5);
      n2 = TERM();
      jj_consume_token(3);
                id1=n1.getId();
                id2=n2.getId();
                keyNode= token.image + "(" + id1 + "," + id2 + ")";
                node=ccObj.dag.get(keyNode);
                if(node==null){
                        node=new Node(keyNode, token.image);
                        ccObj.dag.put(keyNode, node);
                        ccObj.consTerm.add(keyNode); // in order to maintain a "cons" nodes' List
                        node.addArg(id1);
                        node.addArg(id2);
                        n1.addParent(keyNode);
                        n2.addParent(keyNode);
                        ccObj.incrEdges();
                        ccObj.incrEdges();
                }
                {if (true) return node;}
      break;
    case FUNVAR:
      token = jj_consume_token(FUNVAR);
                          arguments=new ArrayList<Node>();
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 2:
        jj_consume_token(2);
        n1 = TERM();
                                                                             arguments.add(n1);
        label_3:
        while (true) {
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 5:
            ;
            break;
          default:
            jj_la1[5] = jj_gen;
            break label_3;
          }
          jj_consume_token(5);
          n2 = TERM();
                                arguments.add(n2);
        }
        jj_consume_token(3);
        break;
      default:
        jj_la1[6] = jj_gen;
        ;
      }
                        if(arguments.size()==0) // the token is a variable/costant
                                {if (true) return insertVar(token.image);}
                        else{                                   // the token is an uninterpreted function
                                /* check if a function with that name 
				 * but different arguments' number has been already read
				 */
                                Integer f=(Integer) functions.get(token.image);
                                if(f!=null){
                                        if(f.intValue()!=arguments.size())
                                                {if (true) throw new ParseException("The function \u005c"" + token.image
                                                        + "\u005c" has been already read with " + f.intValue() + " argument(s)");}
                                }
                                else
                                        functions.put(token.image, new Integer(arguments.size()));

                                String s="";
                                for(Node a: arguments)
                                        s+= a.getId() + ",";
                                s=s.substring(0,s.length()-1);
                                keyNode=token.image + "(" + s + ")";
                                node=(ccObj.dag.get(keyNode));
                                if(node==null){
                                        node=new Node(keyNode, token.image);
                                        ccObj.dag.put(keyNode, node);
                                        for(Node a: arguments){
                                                node.addArg(a.getId());
                                                a.addParent(keyNode);
                                                ccObj.incrEdges();
                                        }
                                }
                                {if (true) return node;}
                        }
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  static private boolean jj_3_1() {
    if (jj_scan_token(1)) return true;
    if (jj_scan_token(7)) return true;
    return false;
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public ParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private Token jj_scanpos, jj_lastpos;
  static private int jj_la;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[8];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x20482,0x2,0x20,0x20080,0x402,0x20,0x4,0xb00,};
   }
  static final private JJCalls[] jj_2_rtns = new JJCalls[1];
  static private boolean jj_rescan = false;
  static private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Parser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Parser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Parser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new ParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Parser(ParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(ParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 8; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  static final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  static private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;
  static private int[] jj_lasttokens = new int[100];
  static private int jj_endpos;

  static private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[19];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 8; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 19; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

  static private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 1; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  static private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
