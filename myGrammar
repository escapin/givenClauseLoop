#################################################################
#############  GRAMMAR FOR CNF-TPTP PARSER	#####################
#################################################################
<TPTP_file>          ::= <TPTP_input>
<TPTP_input>         ::= <cnf_annotated>*

<cnf_annotated>      ::= cnf(<name>,<formula_role>,<cnf_formula> ( , <annotations> )?).

<name>               ::= <atomic_word> | <integer>
<formula_role>       ::= <lower_word>
<annotations>        ::= ( <atomic_word> | <upper_word> )*

#################################################################
##  CNF FORMULAE (variables implicitly universally quantified) ##
#################################################################
<cnf_formula>        ::= "(" <literal> ( <vline> <literal> )* ")" | <literal> ( <vline> <literal> )*
<literal>            ::= <atomic_formula> | ~ <atomic_formula>
<atomic_formula>     ::= <atomic_word> | <atomic_word>(<arguments>)	%---- this production represents PREDICATES 

#################################################################
###################  FIRST ORDER TERMS   ########################
#################################################################
% Non ci possono essere termini (funzioni, variabili o costanti) se non come argomenti di predicati 
<arguments>          ::= <term> | <term>,<arguments>
<term>               ::= <function_term> | <upper_word>			%---- <upper_word> defines VARIABLES
<function_term>      ::= <atomic_word>("(" <arguments> ")")?		%---- <atomic_word> with brackets defines FUNCTION
									%---- <atomic_word> without brackets defines CONSTANT

#################################################################
########################    STRING    ###########################
#################################################################
<atomic_word>        ::= <lower_word> | <single_quoted>
<lower_word>         ::- ( <DOLLAR_LOWER_ALFA> | <LOWER_ALPHA> ) <alpha_numeric>*
<upper_word>         ::- ( <DOLLAR_UPPER_ALFA> | <UPPER_ALPHA> ) <alpha_numeric>*
<single_quoted>      ::- <single_quote><sq_char>+<single_quote>
<alpha_numeric>      ::: (<lower_alpha>|<upper_alpha>|<numeric>|[_])


<DEF_SYS>		::: "$" | "$$"
<LOWER_ALFA>		::: [a-z]
<UPPER_ALFA>		::: [A-Z]
<DOLLAR_LOWER_ALFA>	::: <DEF_SYS><LOWER_ALPHA>	
<DOLLAR_UPPER_ALFA>	::: <DEF_SYS><UPPER_ALPHA>	
<SQ_CHAR>		::: (["\40"-"\46"] | ["\50-\133"] | ["\135"-"\176]) %---Space and visible characters upto ~, except ' and \


#################################################################
########################    NUMBER    ###########################
#################################################################

<integer>            ::- (<signed_integer>|<decimal>)
<signed_integer>     ::- <sign><decimal>
<decimal>            ::- <zero_numeric> | <non_zero_numeric><numeric>*

<NUMERIC>            ::: [0-9]
<ZERO_NUMERIC>       ::: [0]
<NON_ZERO_NUMERIC>   ::: [1-9]
<SIGN>               ::: + | - 


#################################################################
#####################   General purpose    ######################
#################################################################
<SINGLE_QUOTE>       	::: [']
<VLINE>			::: [|]

