#################################################################
#############  GRAMMAR FOR CNF-TPTP PARSER	#####################
#################################################################

<TPTP_file>          ::= <TPTP_input>
<TPTP_input>         ::= <cnf_annotated>*

<cnf_annotated>      ::= cnf(<name>,<formula_role>,<cnf_formula> ( , <annotations> )?).

<name>               ::= <atomic_word> | <integer>
<formula_role>       ::= <lower_word>
<annotations>        ::= ( <atomic_word> | <upper_word> )*

#################################################################
##  CNF FORMULAE (variables implicitly universally quantified) ##
#################################################################

<cnf_formula>        ::= (<disjunction>)+
<disjunction>        ::= <literal> | <disjunction> <vline> <literal>
<literal>            ::= <atomic_formula> | ~ <atomic_formula>


<atomic_formula>     ::= <atomic_word> | <atomic_word>(<arguments>)  %---- this production represents predicates 



#################################################################
###################  FIRST ORDER TERMS   ########################
#################################################################

<arguments>          ::= <term> | <term>,<arguments>
<term>               ::= <function_term> | <variable>
<function_term>      ::= <plain_term> | <defined_term> | <system_term>
<plain_term>         ::= <constant> | <functor>(<arguments>)

%----Variables, and only variables, start with uppercase
<variable>           ::= <upper_word>
<constant>           ::= <functor>
<functor>            ::= <atomic_word>

#################################################################
########################    STRING    ###########################
#################################################################


<atomic_word>        ::= <lower_word> | <single_quoted>
%----Note: "defined" means a word starting with one $ and "system" means $$.
<lower_word>         ::- <$>*<lower_alpha><alpha_numeric>*
<upper_word>         ::- <$>*<upper_alpha><alpha_numeric>*
<single_quoted>      ::- <single_quote><sq_char>+<single_quote>
<alpha_numeric>      ::: (<lower_alpha>|<upper_alpha>|<numeric>|[_])

<SQ_CHAR>            ::: (["\40"-"\46"] | ["\50-\133"] | ["\135"-"\176]) %---Space and visible characters upto ~, except ' and \
<LOWER_ALFA>	     ::: [a-z]
<UPPER_ALFA>         ::: [A-Z]



#################################################################
########################    NUMBER    ###########################
#################################################################

<integer>            ::- (<signed_integer>|<decimal>)
<signed_integer>     ::- <sign><decimal>
<decimal>            ::- (<zero_numeric>|<positive_decimal>)
<positive_decimal>   ::- <non_zero_numeric><numeric>*

<NUMERIC>            ::: [0-9]
<ZERO_NUMERIC>       ::: [0]
<NON_ZERO_NUMERIC>   ::: [1-9]
<SIGN>               ::: + | - 


#################################################################
#####################   General purpose    ######################
#################################################################
<single_quote>       ::: [']
<vline>				 ::: [|]
<dollar>             ::: [$]
